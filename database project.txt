-- U-- Users Table
CREATE TABLE Users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50),
  password VARCHAR(50),
  email VARCHAR(100)
);

-- Addresses Table
CREATE TABLE Addresses (
  address_id INT PRIMARY KEY,
  user_id INT,
  address_line1 VARCHAR(100),
  address_line2 VARCHAR(100),
  city VARCHAR(100),
  state VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100),
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Categories Table
CREATE TABLE Categories (
  category_id INT PRIMARY KEY,
  category_name VARCHAR(100),
  parent_category_id INT,
  FOREIGN KEY (parent_category_id) REFERENCES Categories(category_id)
);

-- Products Table
CREATE TABLE Products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(100),
  price DECIMAL(10, 2),
  description VARCHAR(255),
  category_id INT,
  FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

-- Orders Table
CREATE TABLE Orders (
  order_id INT PRIMARY KEY,
  user_id INT,
  order_date DATE,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Order_Items Table
CREATE TABLE Order_Items (
  order_item_id INT PRIMARY KEY,
  order_id INT,
  product_id INT,
  quantity INT,
  unit_price DECIMAL(10, 2),
  FOREIGN KEY (order_id) REFERENCES Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Payments Table
CREATE TABLE Payments (
  payment_id INT PRIMARY KEY,
  order_id INT,
  payment_date DATE,
  amount DECIMAL(10, 2),
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

-- Reviews Table
CREATE TABLE Reviews (
  review_id INT PRIMARY KEY,
  user_id INT,
  product_id INT,
  rating INT,
  comment VARCHAR(255),
  FOREIGN KEY (user_id) REFERENCES Users(user_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Coupons Table
CREATE TABLE Coupons (
  coupon_id INT PRIMARY KEY,
  coupon_code VARCHAR(50),
  discount DECIMAL(5, 2),
  start_date DATE,
  end_date DATE
);

-- Wishlist Table
CREATE TABLE Wishlist (
  wishlist_id INT PRIMARY KEY,
  user_id INT,
  product_id INT,
  FOREIGN KEY (user_id) REFERENCES Users(user_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);








-- Insert 10 rows of data into Users table
INSERT INTO Users (user_id, username, password, email)
VALUES
  (1, 'john.doe', 'password123', 'john.doe@example.com'),
  (2, 'jane.smith', 'password456', 'jane.smith@example.com'),
  (3, 'alice.wilson', 'password789', 'alice.wilson@example.com'),
  (4, 'bob.johnson', 'passwordabc', 'bob.johnson@example.com'),
  (5, 'emma.brown', 'passworddef', 'emma.brown@example.com'),
  (6, 'sam.wilson', 'passwordghi', 'sam.wilson@example.com'),
  (7, 'sara.thompson', 'passwordjkl', 'sara.thompson@example.com'),
  (8, 'david.green', 'passwordmno', 'david.green@example.com'),
  (9, 'lisa.davis', 'passwordpqr', 'lisa.davis@example.com'),
  (10, 'mike.harris', 'passwordstu', 'mike.harris@example.com');

-- Insert 10 rows of data into Addresses table
INSERT INTO Addresses (address_id, user_id, address_line1, city, state, postal_code, country)
VALUES
  (1, 1, '123 Main St', 'New York', 'NY', '10001', 'USA'),
  (2, 2, '456 Elm St', 'Los Angeles', 'CA', '90001', 'USA'),
  (3, 3, '789 Oak St', 'Chicago', 'IL', '60601', 'USA'),
  (4, 4, '321 Maple St', 'Houston', 'TX', '77001', 'USA'),
  (5, 5, '654 Pine St', 'Miami', 'FL', '33101', 'USA'),
  (6, 6, '987 Walnut St', 'Denver', 'CO', '80201', 'USA'),
  (7, 7, '147 Cherry St', 'Seattle', 'WA', '98101', 'USA'),
  (8, 8, '258 Peach St', 'Boston', 'MA', '02201', 'USA'),
  (9, 9, '369 Strawberry St', 'San Francisco', 'CA', '94101', 'USA'),
  (10, 10, '951 Orange St', 'Atlanta', 'GA', '30301', 'USA');

-- Insert 10 rows of data into Categories table
INSERT INTO Categories (category_id, category_name, parent_category_id)
VALUES
  (1, 'Electronics', NULL),
  (2, 'Clothing', NULL),
  (3, 'Home & Kitchen', NULL),
  (4, 'Books', NULL),
  (5, 'Sports & Outdoors', NULL),
  (6, 'Beauty', NULL),
  (7, 'Toys & Games', NULL),
  (8, 'Automotive', NULL),
  (9, 'Health & Personal Care', NULL),
  (10, 'Movies & TV', NULL);

-- Insert 10 rows of data into Products table
INSERT INTO Products (product_id, product_name, price, description, category_id)
VALUES
  (1, 'Smartphone', 499.99, 'A high-end smartphone', 1),
  (2, 'Laptop', 999.99, 'Powerful laptop for gaming and productivity', 1),
  (3, 'T-Shirt', 19.99, 'Cotton t-shirt', 2),
  (4, 'Jeans', 59.99, 'Blue denim jeans', 2),
  (5, 'Coffee Maker', 79.99, 'Automatic coffee maker', 3),
  (6, 'Cookware Set', 149.99, 'Stainless steel cookware set', 3),
  (7, 'Novel', 12.99, 'Best-selling novel', 4),
  (8, 'Textbook', 89.99, 'College textbook', 4),
  (9, 'Soccer Ball', 24.99, 'Official size soccer ball', 5),
  (10, 'Yoga Mat', 29.99, 'Non-slip yoga mat', 5);

-- Insert 10 rows of data into Orders table
INSERT INTO Orders (order_id, user_id, order_date)
VALUES
  (1, 1, '2023-01-01'),
  (2, 2, '2023-02-01'),
  (3, 3, '2023-03-01'),
  (4, 4, '2023-04-01'),
  (5, 5, '2023-05-01'),
  (6, 6, '2023-06-01'),
  (7, 7, '2023-07-01'),
  (8, 8, '2023-08-01'),
  (9, 9, '2023-09-01'),
  (10, 10, '2023-10-01');

-- Insert 10 rows of data into Order_Items table
INSERT INTO Order_Items (order_item_id, order_id, product_id, quantity, unit_price)
VALUES
  (1, 1, 1, 2, 499.99),
  (2, 2, 2, 1, 999.99),
  (3, 3, 3, 3, 19.99),
  (4, 4, 4, 1, 59.99),
  (5, 5, 5, 1, 79.99),
  (6, 6, 6, 1, 149.99),
  (7, 7, 7, 2, 12.99),
  (8, 8, 8, 1, 89.99),
  (9, 9, 9, 4, 24.99),
  (10, 10, 10, 1, 29.99);

-- Insert 10 rows of data into Payments table
INSERT INTO Payments (payment_id, order_id, payment_date, amount)
VALUES
  (1, 1, '2023-01-02', 999.98),
  (2, 2, '2023-02-02', 999.99),
  (3, 3, '2023-03-02', 59.97),
  (4, 4, '2023-04-02', 59.99),
  (5, 5, '2023-05-02', 79.99),
  (6, 6, '2023-06-02', 149.99),
  (7, 7, '2023-07-02', 25.98),
  (8, 8, '2023-08-02', 89.99),
  (9, 9, '2023-09-02', 99.96),
  (10, 10, '2023-10-02', 29.99);

-- Insert 10 rows of data into Reviews table
INSERT INTO Reviews (review_id, user_id, product_id, rating, comment)
VALUES
  (1, 1, 1, 5, 'Great smartphone!'),
  (2, 2, 2, 4, 'Good laptop for gaming'),
  (3, 3, 3, 3, 'Decent t-shirt'),
  (4, 4, 4, 4, 'Comfortable jeans'),
  (5, 5, 5, 5, 'Makes excellent coffee'),
  (6, 6, 6, 2, 'High-quality cookware set'),
  (7, 7, 7, 4, 'Engaging novel'),
  (8, 8, 8, 3, 'Informative textbook'),
  (9, 9, 9, 1, 'Durable soccer ball'),
  (10, 10, 10, 1.5, 'Great yoga mat');

-- Insert 10 rows of data into Coupons table
INSERT INTO Coupons (coupon_id, coupon_code, discount, start_date, end_date)
VALUES
  (1, 'SUMMER10', 10.00, '2023-06-01', '2023-06-30'),
  (2, 'SALE20', 20.00, '2023-07-01', '2023-07-31'),
  (3, 'FALL15', 15.00, '2023-09-01', '2023-09-30'),
  (4, 'WINTER25', 25.00, '2023-12-01', '2023-12-31'),
  (5, 'SPRING10', 10.00, '2024-03-01', '2024-03-31'),
  (6, 'DISCOUNT50', 50.00, '2024-05-01', '2024-05-31'),
  (7, 'SAVEMORE15', 15.00, '2024-07-01', '2024-07-31'),
  (8, 'BACKTOSCHOOL20', 20.00, '2024-09-01', '2024-09-30'),
  (9, 'HOLIDAY10', 10.00, '2024-12-01', '2024-12-31'),
  (10, 'EXTRA5', 5.00, '2025-01-01', '2025-01-31');

-- Insert 10 rows of data into Wishlist table
INSERT INTO Wishlist (wishlist_id, user_id, product_id)
VALUES
  (1, 1, 2),
  (2, 2, 1),
  (3, 3, 4),
  (4, 4, 3),
  (5, 5, 6),
  (6, 6, 5),
  (7, 7, 8),
  (8, 8, 7),
  (9, 9, 10),
  (10, 10, 9);


-- change column name
ALTER TABLE Products
CHANGE COLUMN description product_description VARCHAR(255);

-- Add the new column
ALTER TABLE Products
ADD COLUMN rating_count INT DEFAULT 0;

-- Update the rating_count for each product
UPDATE Products
SET rating_count = (
  SELECT COUNT(*) FROM Reviews WHERE Reviews.product_id = Products.product_id
);

--Retrieve products in descending order of price:
SELECT product_name, price
FROM Products
ORDER BY price DESC;

-- Retrieve all products with their corresponding categories:
SELECT Products.product_id, Products.product_name, Categories.category_name
FROM Products
JOIN Categories ON Products.category_id = Categories.category_id;

-- Get the total sales for each order
SELECT Orders.order_id, SUM(Order_Items.quantity * Order_Items.unit_price) AS total_sales
FROM Orders
JOIN Order_Items ON Orders.order_id = Order_Items.order_id
GROUP BY Orders.order_id;

--Find the products with the highest ratings
SELECT Products.product_name, MAX(Reviews.rating) AS highest_rating
FROM Products
JOIN Reviews ON Products.product_id = Reviews.product_id
GROUP BY Products.product_name;

--Retrieve the orders placed by a specific user
SELECT Orders.order_id, Orders.order_date
FROM Orders
WHERE Orders.user_id = 1;

--Get the average rating for each product:
SELECT Products.product_name, AVG(Reviews.rating) AS average_rating
FROM Products
LEFT JOIN Reviews ON Products.product_id = Reviews.product_id
GROUP BY Products.product_name;

--Retrieve the total number of products in each category:
SELECT Categories.category_name, COUNT(Products.product_id) AS total_products
FROM Categories
LEFT JOIN Products ON Categories.category_id = Products.category_id
GROUP BY Categories.category_name;

--Find the orders placed between two specific dates:
SELECT Orders.order_id, Orders.order_date
FROM Orders
WHERE Orders.order_date BETWEEN '2023-01-01' AND '2023-03-31';

--Get the products with a price higher than a specific amount:
SELECT product_name, price
FROM Products
WHERE price > 100.00;


--Retrieve the users who have placed the most orders:
SELECT Users.user_id, Users.username, COUNT(Orders.order_id) AS total_orders
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
GROUP BY Users.user_id, Users.username
ORDER BY total_orders DESC
LIMIT 5;

--Retrieve products with prices higher than the average price:
SELECT product_name, price
FROM Products
WHERE price > (
  SELECT AVG(price)
  FROM Products
);


--Retrieve orders placed by users who have not made any purchases in the last 30 days:
SELECT order_id, order_date
FROM Orders
WHERE user_id NOT IN (
  SELECT DISTINCT user_id
  FROM Orders
  WHERE order_date >= (CURDATE() - INTERVAL 30 DAY)
);

--Get products with names containing the word "smart":
SELECT product_name
FROM Products
WHERE product_name LIKE '%smart%';

--Retrieve products with names having exactly five characters
SELECT product_name
FROM Products
WHERE product_name LIKE '_____';

--Retrieve products and their corresponding reviews, including products without any reviews:
SELECT Products.product_id, Products.product_name, Reviews.comment
FROM Products
RIGHT JOIN Reviews ON Products.product_id = Reviews.product_id;

--In this example, we use the "CASE" statement to categorize the products based on their price range.
SELECT product_id, product_name, price,
  CASE
    WHEN price < 50 THEN 'Budget'
    WHEN price >= 50 AND price < 100 THEN 'Standard'
    WHEN price >= 100 AND price < 200 THEN 'Premium'
    ELSE 'Luxury'
  END AS price_category
FROM Products;


SELECT user_id, UPPER(username) AS upper_username
FROM Users;

--Extract a substring from the address_line1 column in the "Addresses" table:
SELECT address_id, MID(address_line1, 1, 10) AS substring_address
FROM Addresses;

--Round the price of products to the nearest integer in the "Products" table:
SELECT product_id, ROUND(price) AS rounded_price
FROM Products;

--Concatenate the username and email columns in the "Users" table:
SELECT user_id, CONCAT(username, ' - ', email) AS username_email
FROM Users;


--Get the total revenue generated by a specific product:v
SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
WHERE p.product_id = <product_id>;


--Retrieve the latest 10 reviews with their corresponding product details:
SELECT r.review_id, r.rating, r.comment, p.product_name
FROM Reviews r
JOIN Products p ON r.product_id = p.product_id
ORDER BY r.review_id DESC
LIMIT 10;


--Retrieve the top 5 products with the highest sales:
SELECT p.product_id, p.product_name, SUM(oi.quantity) AS total_sales
FROM Products p
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_sales DESC
LIMIT 5;

--Find all users who have made a purchase in the last 30 days:
SELECT DISTINCT u.*
FROM Users u
JOIN Orders o ON u.user_id = o.user_id
WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);

--Find the top 3 categories with the highest total sales:
SELECT c.category_id, c.category_name, SUM(oi.quantity) AS total_sales
FROM Categories c
JOIN Products p ON c.category_id = p.category_id
JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY c.category_id, c.category_name
ORDER BY total_sales DESC
LIMIT 3;


--Calculate the average rating for each product along with the number of reviews:
SELECT p.product_id, p.product_name, AVG(r.rating) AS average_rating, COUNT(r.review_id) AS review_count
FROM Products p
LEFT JOIN Reviews r ON p.product_id = r.product_id
GROUP BY p.product_id, p.product_name;


--

